{"version":3,"file":"index-Co8CrLCo.js","sources":["../../node_modules/@gsap/react/src/index.js"],"sourcesContent":["/*!\n * @gsap/react 2.1.2\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\nimport { useEffect, useLayoutEffect, useRef } from \"react\";\nimport gsap from \"gsap\";\n\nlet useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? useLayoutEffect : useEffect,\n    isConfig = value => value && !Array.isArray(value) && typeof(value) === \"object\",\n    emptyArray = [],\n    defaultConfig = {},\n    _gsap = gsap; // accommodates situations where different versions of GSAP may be loaded, so a user can gsap.registerPlugin(useGSAP);\n\nexport const useGSAP = (callback, dependencies = emptyArray) => {\n  let config = defaultConfig;\n  if (isConfig(callback)) {\n    config = callback;\n    callback = null;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  } else if (isConfig(dependencies)) {\n    config = dependencies;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  }\n  (callback && typeof callback !== \"function\") && console.warn(\"First parameter must be a function or config object\");\n  const { scope, revertOnUpdate } = config,\n        mounted = useRef(false),\n        context = useRef(_gsap.context(() => { }, scope)),\n        contextSafe = useRef((func) => context.current.add(null, func)),\n        deferCleanup = dependencies && dependencies.length && !revertOnUpdate;\n  deferCleanup && useIsomorphicLayoutEffect(() => {\n    mounted.current = true;\n    return () => context.current.revert();\n  }, emptyArray);\n  useIsomorphicLayoutEffect(() => {\n    callback && context.current.add(callback, scope);\n    if (!deferCleanup || !mounted.current) { // React renders bottom-up, thus there could be hooks with dependencies that run BEFORE the component mounts, thus cleanup wouldn't occur since a hook with an empty dependency Array would only run once the component mounts.\n      return () => context.current.revert();\n    }\n  }, dependencies);\n  return { context: context.current, contextSafe: contextSafe.current };\n};\nuseGSAP.register = core => { _gsap = core; };\nuseGSAP.headless = true; // doesn't require the window to be registered.\n"],"names":["useIsomorphicLayoutEffect","useLayoutEffect","useEffect","isConfig","value","emptyArray","defaultConfig","_gsap","gsap","useGSAP","callback","dependencies","config","scope","revertOnUpdate","mounted","useRef","context","contextSafe","func","deferCleanup","core"],"mappings":"gFAaA,IAAIA,EAA4B,OAAO,SAAa,IAAcC,EAAAA,gBAAkBC,EAAAA,UAChFC,EAAWC,GAASA,GAAS,CAAC,MAAM,QAAQA,CAAK,GAAK,OAAOA,GAAW,SACxEC,EAAa,CAAA,EACbC,EAAgB,CAAA,EAChBC,EAAQC,EAEA,MAACC,EAAU,CAACC,EAAUC,EAAeN,IAAe,CAC9D,IAAIO,EAASN,EACTH,EAASO,CAAQ,GACnBE,EAASF,EACTA,EAAW,KACXC,EAAe,iBAAkBC,EAASA,EAAO,aAAeP,GACvDF,EAASQ,CAAY,IAC9BC,EAASD,EACTA,EAAe,iBAAkBC,EAASA,EAAO,aAAeP,GAEjEK,GAAY,OAAOA,GAAa,YAAe,QAAQ,KAAK,qDAAqD,EAClH,KAAM,CAAE,MAAAG,EAAO,eAAAC,CAAc,EAAKF,EAC5BG,EAAUC,EAAAA,OAAO,EAAK,EACtBC,EAAUD,EAAAA,OAAOT,EAAM,QAAQ,IAAM,CAAE,EAAGM,CAAK,CAAC,EAChDK,EAAcF,EAAAA,OAAQG,GAASF,EAAQ,QAAQ,IAAI,KAAME,CAAI,CAAC,EAC9DC,EAAeT,GAAgBA,EAAa,QAAU,CAACG,EAC7D,OAAAM,GAAgBpB,EAA0B,KACxCe,EAAQ,QAAU,GACX,IAAME,EAAQ,QAAQ,OAAM,GAClCZ,CAAU,EACbL,EAA0B,IAAM,CAE9B,GADAU,GAAYO,EAAQ,QAAQ,IAAIP,EAAUG,CAAK,EAC3C,CAACO,GAAgB,CAACL,EAAQ,QAC5B,MAAO,IAAME,EAAQ,QAAQ,OAAM,CAEvC,EAAGN,CAAY,EACR,CAAE,QAASM,EAAQ,QAAS,YAAaC,EAAY,OAAO,CACrE,EACAT,EAAQ,SAAWY,GAAQ,CAAEd,EAAQc,CAAM,EAC3CZ,EAAQ,SAAW","x_google_ignoreList":[0]}