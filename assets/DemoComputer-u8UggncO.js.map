{"version":3,"file":"DemoComputer-u8UggncO.js","sources":["../../node_modules/@gsap/react/src/index.js","../../src/components/projects/DemoComputer.jsx"],"sourcesContent":["/*!\n * @gsap/react 2.1.2\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\nimport { useEffect, useLayoutEffect, useRef } from \"react\";\nimport gsap from \"gsap\";\n\nlet useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? useLayoutEffect : useEffect,\n    isConfig = value => value && !Array.isArray(value) && typeof(value) === \"object\",\n    emptyArray = [],\n    defaultConfig = {},\n    _gsap = gsap; // accommodates situations where different versions of GSAP may be loaded, so a user can gsap.registerPlugin(useGSAP);\n\nexport const useGSAP = (callback, dependencies = emptyArray) => {\n  let config = defaultConfig;\n  if (isConfig(callback)) {\n    config = callback;\n    callback = null;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  } else if (isConfig(dependencies)) {\n    config = dependencies;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  }\n  (callback && typeof callback !== \"function\") && console.warn(\"First parameter must be a function or config object\");\n  const { scope, revertOnUpdate } = config,\n        mounted = useRef(false),\n        context = useRef(_gsap.context(() => { }, scope)),\n        contextSafe = useRef((func) => context.current.add(null, func)),\n        deferCleanup = dependencies && dependencies.length && !revertOnUpdate;\n  deferCleanup && useIsomorphicLayoutEffect(() => {\n    mounted.current = true;\n    return () => context.current.revert();\n  }, emptyArray);\n  useIsomorphicLayoutEffect(() => {\n    callback && context.current.add(callback, scope);\n    if (!deferCleanup || !mounted.current) { // React renders bottom-up, thus there could be hooks with dependencies that run BEFORE the component mounts, thus cleanup wouldn't occur since a hook with an empty dependency Array would only run once the component mounts.\n      return () => context.current.revert();\n    }\n  }, dependencies);\n  return { context: context.current, contextSafe: contextSafe.current };\n};\nuseGSAP.register = core => { _gsap = core; };\nuseGSAP.headless = true; // doesn't require the window to be registered.\n","import { useGSAP } from '@gsap/react';\r\nimport { useGLTF, useVideoTexture } from '@react-three/drei';\r\nimport { useThree } from '@react-three/fiber';\r\nimport gsap from 'gsap';\r\nimport { useEffect, useMemo, useRef } from 'react';\r\n\r\nconst DemoComputer = props => {\r\n  const group = useRef();\r\n  const { invalidate } = useThree();\r\n\r\n  const { nodes, materials } = useGLTF(\r\n    `${import.meta.env.BASE_URL}/models/computer.glb`\r\n  );\r\n\r\n  // Memoize the texture URL to prevent unnecessary re-renders\r\n  const textureUrl = useMemo(\r\n    () =>\r\n      props.texture ||\r\n      `${import.meta.env.BASE_URL}/textures/project/project1.mp4`,\r\n    [props.texture]\r\n  );\r\n\r\n  const computertxt = useVideoTexture(textureUrl, {\r\n    muted: true,\r\n    loop: true,\r\n    playsInline: true,\r\n  });\r\n\r\n  // Fix texture orientation\r\n  useEffect(() => {\r\n    if (computertxt) {\r\n      computertxt.flipY = false;\r\n    }\r\n  }, [computertxt]);\r\n\r\n  useGSAP(() => {\r\n    if (group.current) {\r\n      gsap.fromTo(\r\n        group.current.rotation,\r\n        { y: Math.PI / 2 },\r\n        {\r\n          y: 0,\r\n          duration: 1,\r\n          ease: 'power3.inOut',\r\n          onUpdate: () => invalidate(), // ðŸ”‘ force re-render\r\n        }\r\n      );\r\n    }\r\n  }, [props.texture]);\r\n\r\n  // Optimize the massive group list - use a loop instead of manual entries\r\n  const screenGroups = useMemo(() => {\r\n    const groups = [];\r\n    for (let i = 1; i <= 148; i++) {\r\n      groups.push(\r\n        <group\r\n          key={`screen-${i}`}\r\n          name={`Screen${i.toString().padStart(3, '0')}`}\r\n          position={[5.658, 1.644, 0.812]}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n          scale={[0.923, 0.855, 0.855]}\r\n        />\r\n      );\r\n    }\r\n    return groups;\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group name=\"Scene\">\r\n        <mesh\r\n          name=\"monitor-screen\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes['monitor-screen'].geometry}\r\n          material={nodes['monitor-screen'].material}\r\n          position={[0.127, 1.831, 0.511]}\r\n          rotation={[1.571, -0.005, 0.031]}\r\n          scale={[0.661, 0.608, 0.401]}\r\n        >\r\n          <meshBasicMaterial map={computertxt} toneMapped={false} />\r\n        </mesh>\r\n\r\n        <group\r\n          name=\"RootNode\"\r\n          position={[0, 1.093, 0]}\r\n          rotation={[-Math.PI / 2, 0, -0.033]}\r\n          scale={0.045}\r\n        >\r\n          {screenGroups}\r\n\r\n          <group\r\n            name=\"Tower-light-007\"\r\n            position={[16.089, -3.47, -14.495]}\r\n            rotation={[Math.PI / 2, 0, 0]}\r\n            scale={0.963}\r\n          />\r\n          <group\r\n            name=\"Tower-light-008\"\r\n            position={[15.155, -3.47, -14.495]}\r\n            rotation={[Math.PI / 2, 0, 0]}\r\n            scale={0.963}\r\n          />\r\n        </group>\r\n\r\n        <group\r\n          name=\"Monitor-B-_computer_0\"\r\n          position={[0.266, 1.132, 0.051]}\r\n          rotation={[0, -0.033, 0]}\r\n          scale={[0.042, 0.045, 0.045]}\r\n        >\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_1'].geometry}\r\n            material={materials.computer}\r\n          />\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_2\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_2'].geometry}\r\n            material={materials.base__0}\r\n          />\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_3\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_3'].geometry}\r\n            material={materials.Material_36}\r\n          />\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_4\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_4'].geometry}\r\n            material={materials.Material_35}\r\n          />\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_5\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_5'].geometry}\r\n            material={materials.Material_34}\r\n          />\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_6\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_6'].geometry}\r\n            material={materials.keys}\r\n          />\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_7\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_7'].geometry}\r\n            material={materials.keys2}\r\n          />\r\n          <mesh\r\n            name=\"Monitor-B-_computer_0_8\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['Monitor-B-_computer_0_8'].geometry}\r\n            material={materials.Material_37}\r\n          />\r\n        </group>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\n\r\nuseGLTF.preload(`${import.meta.env.BASE_URL}/models/computer.glb`);\r\n\r\nexport default DemoComputer;\r\n"],"names":["useIsomorphicLayoutEffect","useLayoutEffect","useEffect","isConfig","value","emptyArray","defaultConfig","_gsap","gsap","useGSAP","callback","dependencies","config","scope","revertOnUpdate","mounted","useRef","context","contextSafe","func","deferCleanup","core","DemoComputer","props","group","invalidate","useThree","nodes","materials","useGLTF","textureUrl","useMemo","computertxt","useVideoTexture","screenGroups","groups","i","jsx","jsxs"],"mappings":"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","x_google_ignoreList":[0]}