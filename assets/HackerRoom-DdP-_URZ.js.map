{"version":3,"file":"HackerRoom-DdP-_URZ.js","sources":["../../src/components/hero/HackerRoom.jsx"],"sourcesContent":["import { useGLTF, useTexture } from '@react-three/drei';\n\nconst HackerRoom = props => {\n  const { nodes, materials } = useGLTF(\n    `${import.meta.env.BASE_URL}models/hacker-room.glb`\n  );\n\n  const monitortxt = useTexture(\n    `${import.meta.env.BASE_URL}textures/desk/screen.webp`\n  );\n\n  // const videoRef = useRef(document.createElement('video'));\n  // const [videoTexture, setVideoTexture] = useState(null);\n  // const playedRef = useRef(false);\n\n  // useEffect(() => {\n  //   const video = videoRef.current;\n  //   if (playedRef.current) return;\n\n  //   video.src = `${import.meta.env.BASE_URL}textures/desk/monitor.mp4`;\n  //   video.crossOrigin = 'Anonymous';\n  //   video.loop = true;\n  //   video.muted = true;\n\n  //   video.play().catch(console.warn);\n\n  //   const vTexture = new VideoTexture(video);\n  //   setVideoTexture(vTexture);\n\n  //   playedRef.current = true;\n\n  //   return () => {\n  //     vTexture.dispose();\n  //     video.pause();\n  //     video.src = '';\n  //   };\n  // }, []);\n\n  return (\n    <group {...props} dispose={null}>\n      <mesh\n        geometry={nodes.screen_screens_0.geometry}\n        material={materials.screens}\n      >\n        {/* Only render video texture if ready */}\n        {monitortxt && (\n          <meshMatcapMaterial map={monitortxt} toneMapped={false} />\n        )}\n      </mesh>\n      <mesh\n        geometry={nodes.screen_glass_glass_0.geometry}\n        material={materials.glass}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_1.geometry}\n        material={materials.table_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_2.geometry}\n        material={materials.computer_mat}\n      >\n        {/* <meshMatcapMaterial map={monitortxt} /> */}\n      </mesh>\n      <mesh\n        geometry={nodes.table_table_mat_0_3.geometry}\n        material={materials.server_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_4.geometry}\n        material={materials.vhsPlayer_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_5.geometry}\n        material={materials.stand_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_6.geometry}\n        material={materials.mat_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_7.geometry}\n        material={materials.arm_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_8.geometry}\n        material={materials.tv_mat}\n      >\n        {/* <meshMatcapMaterial map={monitortxt} /> */}\n      </mesh>\n      <mesh\n        geometry={nodes.table_table_mat_0_9.geometry}\n        material={materials.cables_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_10.geometry}\n        material={materials.props_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_11.geometry}\n        material={materials.ground_mat}\n      />\n      <mesh\n        geometry={nodes.table_table_mat_0_12.geometry}\n        material={materials.key_mat}\n      />\n    </group>\n  );\n};\n\nuseGLTF.preload(`${import.meta.env.BASE_URL}models/hacker-room.glb`);\n\nexport default HackerRoom;\n"],"names":["HackerRoom","props","nodes","materials","useGLTF","monitortxt","useTexture","jsx"],"mappings":"iLAEA,MAAMA,EAAaC,GAAS,CAC1B,KAAM,CAAE,MAAAC,EAAO,UAAAC,CAAA,EAAcC,EAC3B,sCAA2B,EAGvBC,EAAaC,EACjB,yCAA2B,EA8B7B,cACG,QAAA,CAAO,GAAGL,EAAO,QAAS,KACzB,SAAA,CAAAM,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,iBAAiB,SACjC,SAAUC,EAAU,QAGnB,YACCI,EAAAA,IAAC,qBAAA,CAAmB,IAAKF,EAAY,WAAY,EAAA,CAAO,CAAA,CAAA,EAG5DE,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,qBAAqB,SACrC,SAAUC,EAAU,KAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,SAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,YAAA,CAAA,EAItBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,UAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,aAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,SAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,OAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,OAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,MAAA,CAAA,EAItBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,oBAAoB,SACpC,SAAUC,EAAU,UAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,qBAAqB,SACrC,SAAUC,EAAU,SAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,qBAAqB,SACrC,SAAUC,EAAU,UAAA,CAAA,EAEtBI,EAAAA,IAAC,OAAA,CACC,SAAUL,EAAM,qBAAqB,SACrC,SAAUC,EAAU,OAAA,CAAA,CACtB,EACF,CAEJ,EAEAC,EAAQ,QAAQ,sCAAmD"}